import React, { useState, useRef } from 'react';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Badge } from './ui/badge';
import { Save, Plus, Trash2, Eye, ArrowRight } from 'lucide-react';

interface WireframeElement {
  id: string;
  type: 'rectangle' | 'circle' | 'button' | 'text' | 'line' | 'image' | 'video' | 'icon';
  x: number;
  y: number;
  width: number;
  height: number;
  text?: string;
  backgroundColor?: string;
  textLevel?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p';
  textColor?: string;
  textAlign?: 'left' | 'center' | 'right';
  zIndex?: number;
  borderWidth?: number;
  borderColor?: string;
  iconName?: string;
  iconComponent?: string;
  imageSrc?: string;
  videoSrc?: string;
  navigationTarget?: string | '__FINISH_TEST__';
  parentId?: string;
  name?: string;
}

interface Wireframe {
  id: string;
  name: string;
  elements: WireframeElement[];
}

interface Project {
  id: string;
  name: string;
  resolution: 'mobile' | 'tablet' | 'desktop';
  wireframes: Wireframe[];
  createdAt: string;
}

interface Hotspot {
  id: string;
  wireframeId: string;
  x: number;
  y: number;
  width: number;
  height: number;
  targetWireframeId: string | '__FINISH_TEST__';
  isAutoGenerated?: boolean;
  elementId?: string;
}

interface Flow {
  from: string;
  to: string;
}

interface Test {
  id: string;
  projectId: string;
  name: string;
  objective: string; // Added objective field
  hotspots: Hotspot[];
  flows: Flow[];
}

interface TestCreatorProps {
  project: Project;
  existingTest?: Test;
  onSaveTest: (test: Test) => void;
}

export function TestCreator({ project, existingTest, onSaveTest }: TestCreatorProps) {
  const [testName, setTestName] = useState(existingTest?.name || `Teste - ${project.name}`);
  const [testObjective, setTestObjective] = useState(existingTest?.objective || ''); // New state for objective
  const [manualHotspots, setManualHotspots] = useState<Hotspot[]>(
    existingTest?.hotspots?.filter(h => !h.isAutoGenerated) || []
  );
  const [selectedWireframe, setSelectedWireframe] = useState(project.wireframes[0]?.id || '');
  const [isCreatingHotspot, setIsCreatingHotspot] = useState(false);
  const [selectedHotspot, setSelectedHotspot] = useState<string | null>(null);
  const [zoom] = useState(0.6);
  
  const canvasRef = useRef<HTMLDivElement>(null);

  // Generate automatic hotspots from elements with navigation
  const generateAutoHotspots = (): Hotspot[] => {
    const autoHotspots: Hotspot[] = [];
    
    project.wireframes.forEach(wireframe => {
      wireframe.elements.forEach(element => {
        if (element.navigationTarget) {
          autoHotspots.push({
            id: `auto-${element.id}`,
            wireframeId: wireframe.id,
            x: element.x,
            y: element.y,
            width: element.width,
            height: element.height,
            targetWireframeId: element.navigationTarget,
            isAutoGenerated: true,
            elementId: element.id
          });
        }
      });
    });
    
    return autoHotspots;
  };

  // Combine manual and auto-generated hotspots
  const allHotspots = [...manualHotspots, ...generateAutoHotspots()];

  const getCanvasDimensions = () => {
    switch (project.resolution) {
      case 'mobile': return { width: 375, height: 812 };
      case 'tablet': return { width: 768, height: 1024 };
      case 'desktop': return { width: 1440, height: 900 };
      default: return { width: 375, height: 812 };
    }
  };

  const currentWireframe = project.wireframes.find(w => w.id === selectedWireframe);
  const currentHotspots = allHotspots.filter(h => h.wireframeId === selectedWireframe);
  const currentManualHotspots = manualHotspots.filter(h => h.wireframeId === selectedWireframe);
  const currentAutoHotspots = allHotspots.filter(h => h.wireframeId === selectedWireframe && h.isAutoGenerated);

  const handleCanvasClick = (e: React.MouseEvent) => {
    if (!isCreatingHotspot) return;

    const rect = canvasRef.current?.getBoundingClientRect();
    if (!rect) return;

    const x = (e.clientX - rect.left) / zoom;
    const y = (e.clientY - rect.top) / zoom;

    const newHotspot: Hotspot = {
      id: Date.now().toString(),
      wireframeId: selectedWireframe,
      x: x - 25,
      y: y - 25,
      width: 50,
      height: 50,
      targetWireframeId: project.wireframes[0]?.id || ''
    };

    setManualHotspots(prev => [...prev, newHotspot]);
    setIsCreatingHotspot(false);
    setSelectedHotspot(newHotspot.id);
  };

  const updateHotspotTarget = (hotspotId: string, targetId: string) => {
    setManualHotspots(prev => 
      prev.map(h => h.id === hotspotId ? { ...h, targetWireframeId: targetId } : h)
    );
  };

  const deleteHotspot = (hotspotId: string) => {
    // Only allow deleting manual hotspots
    setManualHotspots(prev => prev.filter(h => h.id !== hotspotId));
    setSelectedHotspot(null);
  };

  const handleSave = () => {
    const test: Test = {
      id: existingTest?.id || Date.now().toString(),
      projectId: project.id,
      name: testName,
      objective: testObjective, // Include objective
      hotspots: allHotspots, // Include both manual and auto-generated hotspots
      flows: []
    };

    onSaveTest(test);
  };

  const getWireframeName = (wireframeId: string) => {
    if (wireframeId === '__FINISH_TEST__') {
      return 'Finalizar Teste';
    }
    return project.wireframes.find(w => w.id === wireframeId)?.name || 'Tela não encontrada';
  };

  const canvasDimensions = getCanvasDimensions();

  return (
    <div className="flex h-[calc(100vh-73px)]">
      {/* Sidebar */}
      <div className="w-80 border-r border-border bg-card overflow-y-auto">
        <div className="p-4 space-y-6">
          {/* Test Info */}
          <div>
            <Label htmlFor="test-name">Nome do teste</Label>
            <Input
              id="test-name"
              value={testName}
              onChange={(e) => setTestName(e.target.value)}
              placeholder="Nome do teste"
            />
          </div>

          <div>
            <Label htmlFor="test-objective">Objetivo do teste</Label>
            <Input
              id="test-objective"
              value={testObjective}
              onChange={(e) => setTestObjective(e.target.value)}
              placeholder="Ex: Criar uma conta no aplicativo"
            />
          </div>

          {/* Wireframe Selection */}
          <div>
            <Label className="text-sm">Tela atual</Label>
            <Select value={selectedWireframe} onValueChange={setSelectedWireframe}>
              <SelectTrigger className="mt-1">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {project.wireframes
                  .filter(wireframe => wireframe.id !== '__FINISH_TEST__') // Filtra a tela final
                  .map((wireframe) => (
                    <SelectItem key={wireframe.id} value={wireframe.id}>
                      {wireframe.name}
                    </SelectItem>
                  ))}
              </SelectContent>
            </Select>
          </div>

          {/* Auto-generated Hotspots Info */}
          <div>
            <Label className="text-sm">Pontos de interação automáticos</Label>
            <div className="text-xs text-muted-foreground bg-green-50 border border-green-200 rounded p-2 mt-1">
              {currentAutoHotspots.length > 0 ? (
                <div>
                  <div className="font-medium text-green-800 mb-1">✅ {currentAutoHotspots.length} ponto{currentAutoHotspots.length !== 1 ? 's' : ''} gerado{currentAutoHotspots.length !== 1 ? 's' : ''} automaticamente</div>
                  <div>Baseado nos elementos com navegação configurada no editor de wireframes.</div>
                </div>
              ) : (
                <div>
                  <div className="font-medium text-gray-600 mb-1">ℹ️ Nenhum ponto automático</div>
                  <div>Configure navegação nos elementos do wireframe para gerar pontos automaticamente.</div>
                </div>
              )}
            </div>
          </div>

          {/* Manual Hotspot Creation */}
          <div>
            <div className="flex items-center justify-between mb-2">
              <Label className="text-sm">Pontos manuais adicionais</Label>
              <Button
                size="sm"
                variant={isCreatingHotspot ? 'default' : 'outline'}
                onClick={() => setIsCreatingHotspot(!isCreatingHotspot)}
              >
                <Plus className="w-4 h-4 mr-1" />
                {isCreatingHotspot ? 'Cancelar' : 'Adicionar'}
              </Button>
            </div>
            
            {isCreatingHotspot && (
              <div className="text-xs text-muted-foreground bg-blue-50 border border-blue-200 rounded p-2">
                Clique na tela para criar um ponto de interação manual adicional
              </div>
            )}
          </div>

          {/* Auto-generated Hotspots List */}
          {currentAutoHotspots.length > 0 && (
            <div>
              <Label className="text-sm">Pontos automáticos nesta tela</Label>
              <div className="space-y-2 mt-2">
                {currentAutoHotspots.map((hotspot, index) => {
                  const element = currentWireframe?.elements.find(e => e.id === hotspot.elementId);
                  return (
                    <Card 
                      key={hotspot.id} 
                      className="border-green-200 bg-green-50"
                    >
                      <CardContent className="p-3">
                        <div className="space-y-1">
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-medium text-green-800">
                              🔗 {element?.type === 'button' ? 'Botão' : element?.type === 'text' ? 'Texto' : element?.type || 'Elemento'}
                            </span>
                            <Badge variant="outline" className="text-xs border-green-300 text-green-700">
                              Automático
                            </Badge>
                          </div>
                          <div className="text-xs text-green-700">
                            {element?.text && `"${element.text}"`}
                          </div>
                          <div className="flex items-center text-xs text-green-600">
                            <ArrowRight className="w-3 h-3 mr-1" />
                            {getWireframeName(hotspot.targetWireframeId)}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>
            </div>
          )}

          {/* Manual Hotspots List */}
          {currentManualHotspots.length > 0 && (
            <div>
              <Label className="text-sm">Pontos manuais nesta tela</Label>
              <div className="space-y-2 mt-2">
                {currentManualHotspots.map((hotspot, index) => (
                  <Card 
                    key={hotspot.id} 
                    className={`cursor-pointer transition-colors ${
                      selectedHotspot === hotspot.id ? 'ring-2 ring-blue-500' : ''
                    }`}
                    onClick={() => setSelectedHotspot(hotspot.id)}
                  >
                    <CardHeader className="pb-2">
                      <CardTitle className="text-sm flex items-center justify-between">
                        <span>Hotspot manual {index + 1}</span>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={(e) => {
                            e.stopPropagation();
                            deleteHotspot(hotspot.id);
                          }}
                          className="p-1 h-auto"
                        >
                          <Trash2 className="w-3 h-3" />
                        </Button>
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <div className="space-y-2">
                        <div className="text-xs text-muted-foreground">
                          Posição: {Math.round(hotspot.x)}, {Math.round(hotspot.y)}
                        </div>
                        
                        <div>
                          <Label className="text-xs">Navega para:</Label>
                          <Select 
                            value={hotspot.targetWireframeId} 
                            onValueChange={(value) => updateHotspotTarget(hotspot.id, value)}
                          >
                            <SelectTrigger className="mt-1 h-8">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              {project.wireframes
                                .filter(wireframe => wireframe.id !== '__FINISH_TEST__') // Filtra a tela final
                                .map((wireframe) => (
                                  <SelectItem key={wireframe.id} value={wireframe.id}>
                                    {wireframe.name}
                                  </SelectItem>
                                ))}
                              <SelectItem key="__FINISH_TEST__" value="__FINISH_TEST__">
                                Finalizar Teste
                              </SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                        
                        {hotspot.targetWireframeId !== selectedWireframe && (
                          <div className="flex items-center text-xs text-muted-foreground">
                            <ArrowRight className="w-3 h-3 mr-1" />
                            {getWireframeName(hotspot.targetWireframeId)}
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          )}

          {/* Instructions */}
          <div className="text-xs text-muted-foreground bg-muted/50 rounded p-3">
            <h4 className="font-medium mb-2">Como usar:</h4>
            <ul className="space-y-1">
              <li>• <span className="text-green-600 font-medium">Pontos automáticos:</span> Gerados a partir de elementos com navegação configurada</li>
              <li>• <span className="text-blue-600 font-medium">Pontos manuais:</span> Criados manualmente para áreas adicionais</li>
              <li>• Usuários só avançam clicando nos pontos de interação</li>
              <li>• Todos os cliques são registrados para análise</li>
            </ul>
          </div>

          {/* Save Button */}
          <Button onClick={handleSave} className="w-full">
            <Save className="w-4 h-4 mr-2" />
            Salvar teste
          </Button>
        </div>
      </div>

      {/* Canvas Area */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="border-b border-border p-4 flex items-center justify-between">
          <div>
            <h3>{currentWireframe?.name || 'Selecione uma tela'}</h3>
            <p className="text-sm text-muted-foreground">
              {currentAutoHotspots.length} automático{currentAutoHotspots.length !== 1 ? 's' : ''} + {currentManualHotspots.length} manual{currentManualHotspots.length !== 1 ? 'is' : ''} = {currentHotspots.length} total
            </p>
          </div>
          
          <div className="flex items-center gap-2">
            <Badge variant="outline">
              {Math.round(zoom * 100)}%
            </Badge>
          </div>
        </div>

        {/* Canvas */}
        <div className="flex-1 overflow-auto bg-muted/30 p-8">
          <div className="flex justify-center">
            <div
              ref={canvasRef}
              className="bg-white border-2 border-gray-300 relative shadow-sm"
              style={{
                width: canvasDimensions.width * zoom,
                height: canvasDimensions.height * zoom,
                cursor: isCreatingHotspot ? 'crosshair' : 'default'
              }}
              onClick={handleCanvasClick}
            >
              {/* Wireframe Elements */}
              {currentWireframe?.elements.map((element) => (
                <div
                  key={element.id}
                  className={`absolute border-2 border-gray-300 ${
                    element.type === 'button' ? 'bg-gray-100' : 'bg-transparent'
                  } ${
                    element.type === 'circle' ? 'rounded-full' : 
                    element.type === 'button' ? 'rounded' : ''
                  } ${
                    element.type === 'line' ? 'border-0 border-t-2' : ''
                  } flex items-center justify-center pointer-events-none`}
                  style={{
                    left: element.x * zoom,
                    top: element.y * zoom,
                    width: element.type === 'line' ? Math.abs(element.width) * zoom : element.width * zoom,
                    height: element.type === 'line' ? 0 : element.height * zoom,
                  }}
                >
                  {element.text && (
                    <span 
                      className="text-sm text-gray-700 select-none overflow-hidden"
                      style={{ fontSize: 12 * zoom }}
                    >
                      {element.text}
                    </span>
                  )}
                </div>
              ))}

              {/* Auto-generated Hotspots */}
              {currentAutoHotspots.map((hotspot, index) => (
                <div
                  key={hotspot.id}
                  className="absolute border-2 border-dashed rounded flex items-center justify-center transition-colors border-green-500 bg-green-100/40 hover:bg-green-100/60"
                  style={{
                    left: hotspot.x * zoom,
                    top: hotspot.y * zoom,
                    width: hotspot.width * zoom,
                    height: hotspot.height * zoom,
                  }}
                >
                  <span className="text-xs font-medium text-green-700">
                    A{index + 1}
                  </span>
                </div>
              ))}

              {/* Manual Hotspots */}
              {currentManualHotspots.map((hotspot, index) => (
                <div
                  key={hotspot.id}
                  className={`absolute border-2 border-dashed rounded cursor-pointer flex items-center justify-center transition-colors ${
                    selectedHotspot === hotspot.id 
                      ? 'border-blue-500 bg-blue-100/60' 
                      : 'border-red-500 bg-red-100/40 hover:bg-red-100/60'
                  }`}
                  style={{
                    left: hotspot.x * zoom,
                    top: hotspot.y * zoom,
                    width: hotspot.width * zoom,
                    height: hotspot.height * zoom,
                  }}
                  onClick={(e) => {
                    e.stopPropagation();
                    setSelectedHotspot(hotspot.id);
                  }}
                >
                  <span className="text-xs font-medium text-red-700">
                    M{index + 1}
                  </span>
                </div>
              ))}

              {/* Flow Indicators */}
              {allHotspots.filter(h => h.wireframeId === selectedWireframe).map((hotspot, index) => {
                const targetWireframe = project.wireframes.find(w => w.id === hotspot.targetWireframeId);
                // Check if target is __FINISH_TEST__
                if (hotspot.targetWireframeId === '__FINISH_TEST__') {
                  return (
                    <div
                      key={`flow-${hotspot.id}`}
                      className={`absolute text-xs px-2 py-1 rounded pointer-events-none ${
                        hotspot.isAutoGenerated 
                          ? 'bg-green-600 text-white' 
                          : 'bg-blue-600 text-white'
                      }`}
                      style={{
                        left: (hotspot.x + hotspot.width + 10) * zoom,
                        top: (hotspot.y + hotspot.height / 2 - 10) * zoom,
                      }}
                    >
                      → Finalizar Teste
                    </div>
                  );
                }
                if (!targetWireframe || hotspot.targetWireframeId === selectedWireframe) return null;
                
                return (
                  <div
                    key={`flow-${hotspot.id}`}
                    className={`absolute text-xs px-2 py-1 rounded pointer-events-none ${
                      hotspot.isAutoGenerated 
                        ? 'bg-green-600 text-white' 
                        : 'bg-blue-600 text-white'
                    }`}
                    style={{
                      left: (hotspot.x + hotspot.width + 10) * zoom,
                      top: (hotspot.y + hotspot.height / 2 - 10) * zoom,
                    }}
                  >
                    → {targetWireframe.name}
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}